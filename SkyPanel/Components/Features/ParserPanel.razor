@using SkyPanel.Components.Models
@using SkyPanel.Components.Services

@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudStack>
    <MudGrid>
        <MudItem xs="12">
                    <MudAutocomplete @bind-Value=Parser
                                     Clearable="true"
                                     SearchFunc="@Search"
                                     Variant="Variant.Outlined"
                                     Label="Select Parser"
                                     ResetValueOnEmptyText="true"
                                     SelectValueOnTab="true"
                                     Placeholder="No Parser Selected"
                                     />
        </MudItem> 
    </MudGrid>
    <MudGrid Class="d-flex justify-center" Style="margin-top: 0.1em">
        <MudItem>
            <MudButton OnClick="@(() => OpenFileDialogAsync())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FileUpload" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(ParserName))">
                Upload Dataset
            </MudButton>
           
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(() => OpenReparseDialogAsync())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PublishedWithChanges" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(ParserName))">
                Fetch and Parse Latest Dataset
            </MudButton>
        </MudItem>
    </MudGrid>
</MudStack>

@code {

    
    
    private Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        { 
            var temp = Task.FromResult<IEnumerable<Parser>>(ParserState.TestParsers); 
            return Task.FromResult(temp.Result.Select(x => x.Name));
        }
        else
        {
            var temp = Task.FromResult<IEnumerable<Parser>>(ParserState.TestParsers);
            return Task.FromResult(temp.Result.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(x => x.Name));
        }
    }
}
