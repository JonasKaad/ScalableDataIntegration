
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudStack>
    <MudGrid>
        <MudItem xs="12">
                    <MudAutocomplete @bind-Value=ParserName
                                     Clearable="true"
                                     SearchFunc="@Search"
                                     Variant="Variant.Outlined"
                                     Label="Select Parser"
                                     ResetValueOnEmptyText="true"
                                     SelectValueOnTab="true"
                                     Placeholder="No Parser Selected"
                                     />
        </MudItem> 
    </MudGrid>
    <MudGrid Class="d-flex justify-center" Style="margin-top: 0.1em">
        <MudItem>
            <MudButton OnClick="@(() => OpenFileDialogAsync())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FileUpload" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(ParserName))">
                Upload Dataset
            </MudButton>
           
        </MudItem>
        <MudItem>
            <MudButton OnClick="@(() => OpenReparseDialogAsync())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PublishedWithChanges" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(ParserName))">
                Fetch and Parse Latest Dataset
            </MudButton>
        </MudItem>
    </MudGrid>
</MudStack>

@code {

    private string[] _parsers =
    [
        "NatTrackParser","BufrParser","WeatherParser", "MetarParser", "SigmetParser", "AirepParser", "NotamParser", "TafParser", "GfsParser", 
        "PacotParser", "TrackParser", "FlightPlanParser", "RadarParser", "SatelliteParser", "OceanicRouteParser", 
        "WindParser", "TemperatureParser", "TurbulenceParser", "IcingParser", "CloudParser", "StormParser", 
        "AviationWeatherParser", "AirspaceParser", "TrafficParser", "RunwayParser", "AirportParser", "FuelDataParser", 
        "ClearanceParser", "LoadSheetParser", "PirepParser", "FIRParser", "SectorParser"
    ];
    
    private Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
           return Task.FromResult<IEnumerable<string>>(_parsers);

        return Task.FromResult(_parsers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

}
