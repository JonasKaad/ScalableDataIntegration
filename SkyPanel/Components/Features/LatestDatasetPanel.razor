@using SkyPanel.Components.Models
@inject IJSRuntime JS
@inject ISnackbar Snackbar

@if (_blobDataItems == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="@_blobDataItems" Hover="true" Elevation="0" QuickFilter="@QuickFilter" Loading="_isLoading" >
        <ToolBarContent >
            <MudGrid xs="12" sm="12" Spacing="6"  Class="align-right">
                <MudItem xs="3" sm="3" Class="mb-2">
                    <MudTextField @bind-Value="_searchString" Label=" " Placeholder="Search" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
                </MudItem>
                <MudItem xs="3" sm="3" Class="mb-2">
                    <MudDateRangePicker PickerVariant="PickerVariant.Inline" Label="Date Range" Editable="true" @bind-DateRange="DateFilter" Placeholder="Select Date"/>
                </MudItem>
                <MudItem xs="4" sm="4">
                    <MudGrid>
                        <MudItem  xs="6" sm="6">
                            <MudTimePicker Label="From hour:min" Editable="true" TimeFormat="HH\:mm" AmPm="false" Elevation="12" @bind-Time="_fromTime"/>
                        </MudItem>
                        <MudItem xs="6" sm="6">
                            <MudTimePicker Label="To hour:min" Editable="true" TimeFormat="HH\:mm" AmPm="false" Elevation="12" @bind-Time="_toTime"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="1" sm="1" Class="d-flex" Style="align-items:center;">
                    <MudStack >
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => Reset())">Reset</MudButton>
                    </MudStack>
                </MudItem>
                <MudItem Class="d-flex"  Style="align-items:center;">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Disabled="@_isLoading" Size="Size.Medium" Color="Color.Primary" OnClick="@(() => RefreshData())"/>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Parser" InitialDirection="SortDirection.None" SortBy="new Func<BlobDataItem, object?>(x => x.Parser!)"/>
            <PropertyColumn Property="x => x.Date" Format="dd/MM/yyyy HH\:mm" />
            <TemplateColumn CellClass=" justify-end">
                <CellTemplate>
                    <MudTooltip Text="Raw dataset not found" Disabled="@(!string.IsNullOrEmpty(@context.Item?.RawPath))" Arrow="true">
                        <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Outlined" Color="Color.Info" Disabled="@(string.IsNullOrEmpty(@context.Item?.RawPath))" OnClick="@(() => Download(@context.Item?.Parser, @context.Item?.RawPath))">Raw</MudButton>
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudTooltip Text="Parsed dataset not found" Disabled="@(!string.IsNullOrEmpty(@context.Item?.ParsedPath))" Arrow="true">
                        <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(@context.Item?.ParsedPath))" OnClick="@(() => Download(@context.Item?.Parser, @context.Item?.ParsedPath))">Parsed</MudButton>
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudButton StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error">Delete</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager PageSizeOptions="new[] { 10, 20 }"/>
        </PagerContent>
    </MudDataGrid>
}

@code {
    private DateRange DateFilter { get; set; } = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date);
    private TimeSpan? _fromTime = new TimeSpan(00, 00, 00);
    private TimeSpan? _toTime = new TimeSpan(23, 59, 59);
    
    private void Reset()
    {
        DateFilter = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date);
        _fromTime = new TimeSpan(00, 00, 00);
        _toTime = new TimeSpan(23, 59, 59);
        _searchString = "";
    }
    
    private string _searchString = "";

    // private bool FilterFunc1(BlobDataItem blobData) => FilterFunc(blobData, searchString1);
    
    private Func<BlobDataItem, bool> QuickFilter => x =>
    {
        if (!string.IsNullOrWhiteSpace(_searchString) &&
            x.Parser != null &&
            !x.Parser.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return false;


        if (DateFilter is { Start: not null, End: not null } && (x.Date < DateFilter.Start.Value.Date || x.Date.Date > DateFilter.End.Value.Date))
        {
            return false;
        }
            // Handle Start Date + Time
            if (!DateFilter.Start.HasValue) return false;
            var startDate = DateFilter.Start;
            DateTime dtStart = new DateTime(startDate.Value.Year, startDate.Value.Month, startDate.Value.Day, 
                _fromTime.GetValueOrDefault().Hours, _fromTime.GetValueOrDefault().Minutes, 0);
            
            if (!DateFilter.End.HasValue) return false;
            var endDate = DateFilter.End;
            DateTime dtEnd = new DateTime(endDate.Value.Year, endDate.Value.Month, endDate.Value.Day, 
                _toTime.GetValueOrDefault().Hours, _toTime.GetValueOrDefault().Minutes, 0);
            
            if (x.Date.Hour < dtStart.Hour)
                return false;
            if(x.Date.Minute < dtStart.Minute)
                return false;
            if (x.Date.Hour > dtEnd.Hour)
                return false;
            if(x.Date.Minute > dtEnd.Minute)
                return false;

        
        return true;
        
    };
}
