@using SkyPanel.Components.Models
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@if (_blobDataItems == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="@_blobDataItems" Hover="true" Elevation="0" QuickFilter="@_quickFilter">
        <ToolBarContent >
            <MudGrid xs="10" sm="10" Style="align-content: end">
                <MudItem xs="2" sm="2" Class="mb-2">
                    <MudTextField @bind-Value="searchString" Label=" " Placeholder="Search" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
                </MudItem>
                <MudItem xs="3" sm="3" Class="mb-2">
                    <MudDateRangePicker PickerVariant="PickerVariant.Inline" Label="Date Range" Editable="true" @bind-DateRange="DateFilter" Placeholder="Select Date"/>
                </MudItem>
                <MudItem xs="4" sm="4">
                    <MudGrid>
                        <MudItem xs="5">
                            <MudTimePicker Label="From hour:min" Editable="true" @bind-Time="_fromTime"/>
                        </MudItem>
                        <MudItem xs="5">
                            <MudTimePicker Label="To hour:min" Editable="true" @bind-Time="_toTime"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Parser" InitialDirection="SortDirection.None" SortBy="new Func<BlobDataItem, object>(x => x.Parser!)"/>
            <PropertyColumn Property="x => x.Date" Format="dd/MM/yyyy HH\:mm" />
            <TemplateColumn CellClass=" justify-end">
                <CellTemplate>
                    <MudTooltip Text="Raw dataset not found" Disabled="@(!string.IsNullOrEmpty(@context.Item?.RawPath))" Arrow="true">
                        <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Outlined" Color="Color.Info" Disabled="@(string.IsNullOrEmpty(@context.Item?.RawPath))" OnClick="@(() => Download(@context.Item?.Parser, @context.Item?.RawPath))">Raw</MudButton>
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudTooltip Text="Parsed dataset not found" Disabled="@(!string.IsNullOrEmpty(@context.Item?.ParsedPath))" Arrow="true">
                        <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Outlined" Color="Color.Primary" Disabled="@(string.IsNullOrEmpty(@context.Item?.ParsedPath))" OnClick="@(() => Download(@context.Item?.Parser, @context.Item?.ParsedPath))">Parsed</MudButton>
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudButton StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error">Delete</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager PageSizeOptions="new[] { 5, 10 }"/>
        </PagerContent>
    </MudDataGrid>
}

@code {
    private DateRange DateFilter { get; set; } = new(DateTime.Today, DateTime.Today);
    private TimeSpan? _fromTime = new TimeSpan(00, 00, 00);
    private TimeSpan? _toTime = new TimeSpan(23, 59, 59);
    
    private string searchString = "";
    
    // private bool FilterFunc1(BlobDataItem blobData) => FilterFunc(blobData, searchString1);

    private Func<BlobDataItem, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (x.Parser.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

}